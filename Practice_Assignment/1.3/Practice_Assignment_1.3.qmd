---
title: "Practice Assingment 1.3"
format: html
---

```{python}
import statsmodels.api as sm
import pandas as pd

mtcars = sm.datasets.get_rdataset("mtcars", "datasets", cache=True).data
df = pd.DataFrame(mtcars)
```

```{python}
df["am"] = df["am"].astype(str) #converts am variable to have text values
df["cyl"]=df["cyl"].astype(str)
df["vs"] = df["vs"].astype(str)
df["gear"]=df["gear"].astype(str)
df["carb"]=df["carb"].astype(str)
```

Now that these variables are converted, when viewing the variables in the dataframe, 
```{python}
df["vs"]
```

the result "dype:object" indicats that this variable has been changed to a string. 

## Part 1: Categorical vs. Float Variable Visualization
### 1)
```{python}
import plotnine as p9
from plotnine import *
```

Side-by-side boxplots of the `mpg` variable by the different values of the `am` variable: 

Using "am" as a categorical variable: 
```{python}
(ggplot(df, aes(x = "am", y = "mpg"))
+ geom_boxplot()
)
```

Using "am" as a float variable: 
```{python}
df["am"] = df["am"].astype(float)
(ggplot(df, aes(x = "am", y = "mpg"))
+ geom_boxplot()
)
```

When you convert "am" back into a float variable, python no longer considers the two values of am to be seperate cases/categories, and it creates a single box. This can be interpreted as an overall average distribution for "mpg" for all "am" values. However, when "am" is a categorical/string variable, we can begin to interpret the differences in "mpg" between the two different "am" values. 

### 2) 

```{python}
from plotnine import geom_histogram
```

Using cyl as a categorical variable: 
```{python}
(ggplot(df,
aes(
  x = "hp",
  fill = "cyl"
))
+ geom_histogram()
)
```

Using cyl as a float variable: 
```{python}
df["cyl"]=df["cyl"].astype(float)
(ggplot(df,
aes(
  x = "hp",
  fill = "cyl"
))
+ geom_histogram()
)
```

In the first plot (using cyl as a categorical variable), we can see the differences between different cyl levels (4,6 and 8). However, once we make this a float variable again, the histogram is all one color, and adding cyl to the histogram doesn't give the histogram any additional information. 

```{python}
df["am"] = df["am"].astype(str)
df["cyl"]=df["cyl"].astype(str)
```

## Part 2: Creating New Visualizations 

### 1) 
```{python}
import seaborn as sns

# plot
sns.violinplot(x=df["cyl"], y=df["mpg"])
```

### 2) 
```{python}
import matplotlib.pyplot as plt
import seaborn as sns

# use the scatterplot function to build the bubble map
sns.scatterplot(data=df, x="mpg", y="disp", size="hp", legend=True, sizes=(20, 2000))

# show the graph
plt.show()
```

### 3) 
```{python}
import seaborn as sns

# Make default density plot
sns.kdeplot(df['mpg'])
```
